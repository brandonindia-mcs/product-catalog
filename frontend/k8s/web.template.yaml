apiVersion: v1
kind: Service
metadata:
  namespace: $NAMESPACE
  # TELLS KUBERNETES HOW TO IDENTIFY THIS SERVICE.
  name: $SERVICE
spec:
  ports:
  - name: http
    port: $RUNPORT_HTTP
    targetPort: $RUNPORT_HTTP
  - name: https
    port: $RUNPORT_HTTPS
    targetPort: $RUNPORT_HTTPS
  selector:
    app: $SELECTOR
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $SERVICE-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  #### BIND TO NGINX FROM: https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.0/deploy/static/provider/cloud/deploy.yaml
  ingressClassName: nginx
  tls:
    - hosts:
        - $INGRESS
      secretName: $TLS_SECRET
  rules:
    - host: $INGRESS
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: $SERVICE
                port:
                  # number: $SSL_PORT
                  # number: $HTTP_PORT
                  number: $INGRESS_PORT
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: $NAMESPACE
  # TELLS KUBERNETES HOW TO IDENTIFY THIS DEPLOYMENT
  name: $DEPLOYMENT
spec:
  ##### replicas: i → Keeps service available during updates
  replicas: $REPLICAS
  ##### strategy block → Explicitly sets rolling update behavior.
  #   strategy:
  #     type: RollingUpdate
  #     rollingUpdate:
  # ##### maxUnavailable: 0 → Ensures no downtime
  #       maxUnavailable: 0   # Never take a pod down until a new one is ready
  # ##### maxSurge: i → Allows one extra pod during rollout for faster updates
  #       maxSurge: 1         # Add at most one extra pod during update
  selector:
    matchLabels:
      app: $SELECTOR
  template:
    metadata:
      labels:
        # TELLS KUBERNETES HOW TO IDENTIFY THIS POD
        app: $POD_TEMPLATE
    spec:
      containers:
        - name: $CONTAINER
          image: $HUB/$REPOSITORY:$TAG
          ports:
            # - containerPort: $RUNPORT_HTTP
            - containerPort: $RUNPORT_HTTPS
          ##### readinessProbe → Ensures traffic only goes to healthy pods
          # readinessProbe:
          #   httpGet:
          #     path: /health    # Adjust to your app's health endpoint
          #     port: 80
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
          #   failureThreshold: 3
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"
# Comment on /health → Replace with your actual health check path.
