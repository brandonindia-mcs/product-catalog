apiVersion: v1
kind: Service
metadata:
  namespace: $NAMESPACE
  name: $SERVICENAME
spec:
  ports:
    - port: $RUNPORT
  selector:
    app: api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: $NAMESPACE
  name: api
spec:
  replicas: $REPLICAS
  # strategy:
  #   type: RollingUpdate
  #   rollingUpdate:
  #     maxUnavailable: 0   # Never take a pod down until a new one is ready
  #     maxSurge: 1         # Add at most one extra pod during update
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          image: $HUB/$REPOSITORY:$TAG
          # volumeMounts:
          #   - name: tls-certs
          #     mountPath: /certs
          #     readOnly: true
          # volumes:
          #   - name: tls-certs
          #     secret:
          #       secretName: middleware-tls
          env:
              #####***  ALLOW SKETCHY CERTS, NOT FOR PRODUCTION  ***####
              #####***  AS-IN SELF-SIGNED OR OTHERWISE  ************####
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: "0"
            - name: NODE_ENV
              value: development
            - name: PG_HOST
              value: pg-service
            - name: PG_DATABASE
              value: catalog
            - name: PG_USER
              value: catalog
            - name: PG_PASSWORD
              value: catalog
            - name: PG_PORT
              value: "5432"
            # - name: DB_HOST
            #   value: postgres
            # - name: DB_PORT
            #   value: "5432"
            # - name: DB_USER
            #   valueFrom:
            #     secretKeyRef:
            #       name: postgres-secret
            #       key: username
            # - name: DB_PASSWORD
            #   valueFrom:
            #     secretKeyRef:
            #       name: postgres-secret
            #       key: password
            # - name: DB_NAME
            #   value: product_catalog
            # - name: DB_SSL
            #   value: "false"
          ports:
            - containerPort: $RUNPORT
          # readinessProbe:
          #   httpGet:
          #     path: /health    # Adjust to your API's health endpoint
          #     port: 3000
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
          #   failureThreshold: 3
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"
